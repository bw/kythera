// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Primitive Types 'new' bool 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "bool",
  },
}
`;

exports[`Primitive Types 'new' float 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "float",
  },
}
`;

exports[`Primitive Types 'new' int 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "int",
  },
}
`;

exports[`Primitive Types 'new' null 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "null",
  },
}
`;

exports[`Primitive Types 'new' str 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "str",
  },
}
`;

exports[`Primitive Types Arithmetic division 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 6,
  },
  "operator": "/",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 3,
  },
}
`;

exports[`Primitive Types Arithmetic float addition 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "float",
    },
    "value": 3.14159,
  },
  "operator": "+",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "float",
    },
    "value": 2.71828,
  },
}
`;

exports[`Primitive Types Arithmetic int Addition 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 2,
  },
  "operator": "+",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 2,
  },
}
`;

exports[`Primitive Types Arithmetic modulo 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 18,
  },
  "operator": "%",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 3,
  },
}
`;

exports[`Primitive Types Arithmetic multiplication 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 4,
  },
  "operator": "*",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 2,
  },
}
`;

exports[`Primitive Types Arithmetic subtraction 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 9,
  },
  "operator": "-",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 5,
  },
}
`;

exports[`Primitive Types Boolean operations and 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
  "operator": "&&",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
}
`;

exports[`Primitive Types Boolean operations and 2`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
  "operator": "&&",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": false,
  },
}
`;

exports[`Primitive Types Boolean operations negate false 1`] = `
ParseNode {
  "kind": "unary",
  "operator": "!",
  "target": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": false,
  },
}
`;

exports[`Primitive Types Boolean operations negate true 1`] = `
ParseNode {
  "kind": "unary",
  "operator": "!",
  "target": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
}
`;

exports[`Primitive Types Boolean operations or 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
  "operator": "||",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
}
`;

exports[`Primitive Types Boolean operations or 2`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": false,
  },
  "operator": "||",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
}
`;

exports[`Primitive Types Boolean operations short-circuit and 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": false,
  },
  "operator": "&&",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
}
`;

exports[`Primitive Types Boolean operations short-circuit or 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
  "operator": "||",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": false,
  },
}
`;

exports[`Primitive Types Casting ints and floats float as int 1`] = `
ParseNode {
  "from": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "float",
    },
    "value": 3.14159,
  },
  "kind": "as",
  "to": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "int",
  },
}
`;

exports[`Primitive Types Casting ints and floats int as float 1`] = `
ParseNode {
  "from": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 10,
  },
  "kind": "as",
  "to": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "float",
  },
}
`;

exports[`Primitive Types Casting ints and floats to bool 0 as bool 1`] = `
ParseNode {
  "from": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 0,
  },
  "kind": "as",
  "to": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "bool",
  },
}
`;

exports[`Primitive Types Casting ints and floats to bool 0.0 as bool 1`] = `
ParseNode {
  "from": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 0,
  },
  "kind": "as",
  "to": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "bool",
  },
}
`;

exports[`Primitive Types Casting ints and floats to bool 1 as bool 1`] = `
ParseNode {
  "from": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 1,
  },
  "kind": "as",
  "to": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "bool",
  },
}
`;

exports[`Primitive Types Casting ints and floats to bool 1.0 as bool 1`] = `
ParseNode {
  "from": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 1,
  },
  "kind": "as",
  "to": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "bool",
  },
}
`;

exports[`Primitive Types Literals false 1`] = `
ParseNode {
  "kind": "literal",
  "type": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "bool",
  },
  "value": false,
}
`;

exports[`Primitive Types Literals float 1`] = `
ParseNode {
  "kind": "literal",
  "type": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "float",
  },
  "value": 3.14159,
}
`;

exports[`Primitive Types Literals int 1`] = `
ParseNode {
  "kind": "literal",
  "type": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "int",
  },
  "value": 10,
}
`;

exports[`Primitive Types Literals null 1`] = `
ParseNode {
  "kind": "literal",
  "type": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "null",
  },
  "value": null,
}
`;

exports[`Primitive Types Literals str 1`] = `
ParseNode {
  "kind": "literal",
  "type": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "str",
  },
  "value": "kythera",
}
`;

exports[`Primitive Types Literals true 1`] = `
ParseNode {
  "kind": "literal",
  "type": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "bool",
  },
  "value": true,
}
`;

exports[`Primitive Types typeof false 1`] = `
ParseNode {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": false,
  },
}
`;

exports[`Primitive Types typeof float 1`] = `
ParseNode {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "float",
    },
    "value": 3.14159,
  },
}
`;

exports[`Primitive Types typeof int 1`] = `
ParseNode {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 10,
  },
}
`;

exports[`Primitive Types typeof null 1`] = `
ParseNode {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "null",
    },
    "value": null,
  },
}
`;

exports[`Primitive Types typeof str 1`] = `
ParseNode {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "str",
    },
    "value": "kythera",
  },
}
`;

exports[`Primitive Types typeof true 1`] = `
ParseNode {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "bool",
    },
    "value": true,
  },
}
`;

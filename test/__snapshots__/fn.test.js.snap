// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Function examples Anonymous function and call 1`] = `
ParseNode {
  "arguments": Array [
    ParseNode {
      "kind": "literal",
      "type": "int",
      "value": 10,
    },
  ],
  "kind": "call",
  "target": ParseNode {
    "body": Array [
      ParseNode {
        "identifier": "q",
        "kind": "let",
        "value": ParseNode {
          "kind": "literal",
          "type": "int",
          "value": 99,
        },
      },
      ParseNode {
        "identifier": "r",
        "kind": "let",
        "value": ParseNode {
          "kind": "identifier",
          "name": "q",
        },
      },
      ParseNode {
        "kind": "return",
        "value": ParseNode {
          "kind": "identifier",
          "name": "q",
        },
      },
    ],
    "kind": "literal",
    "parameters": Array [
      Object {
        "name": "a",
        "type": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "int",
        },
      },
    ],
    "returns": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "type": "fn",
  },
}
`;

exports[`Function examples Fibonacci (call) 1`] = `
ParseNode {
  "arguments": Array [
    ParseNode {
      "kind": "literal",
      "type": "int",
      "value": 10,
    },
  ],
  "kind": "call",
  "target": ParseNode {
    "kind": "identifier",
    "name": "fibo",
  },
}
`;

exports[`Function examples Fibonacci 1`] = `
ParseNode {
  "identifier": "fibo",
  "kind": "let",
  "value": ParseNode {
    "body": Array [
      ParseNode {
        "body": Array [
          ParseNode {
            "kind": "return",
            "value": ParseNode {
              "kind": "literal",
              "type": "int",
              "value": 1,
            },
          },
        ],
        "condition": ParseNode {
          "kind": "binary",
          "left": ParseNode {
            "kind": "identifier",
            "name": "x",
          },
          "operator": "==",
          "right": ParseNode {
            "kind": "literal",
            "type": "int",
            "value": 1,
          },
        },
        "kind": "if",
      },
      ParseNode {
        "body": Array [
          ParseNode {
            "kind": "return",
            "value": ParseNode {
              "kind": "literal",
              "type": "int",
              "value": 0,
            },
          },
        ],
        "condition": ParseNode {
          "kind": "binary",
          "left": ParseNode {
            "kind": "identifier",
            "name": "x",
          },
          "operator": "==",
          "right": ParseNode {
            "kind": "literal",
            "type": "int",
            "value": 0,
          },
        },
        "kind": "if",
      },
      ParseNode {
        "kind": "return",
        "value": ParseNode {
          "kind": "binary",
          "left": ParseNode {
            "arguments": Array [
              ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "identifier",
                  "name": "x",
                },
                "operator": "-",
                "right": ParseNode {
                  "kind": "literal",
                  "type": "int",
                  "value": 1,
                },
              },
            ],
            "kind": "call",
            "target": ParseNode {
              "kind": "identifier",
              "name": "fibo",
            },
          },
          "operator": "+",
          "right": ParseNode {
            "arguments": Array [
              ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "identifier",
                  "name": "x",
                },
                "operator": "-",
                "right": ParseNode {
                  "kind": "literal",
                  "type": "int",
                  "value": 2,
                },
              },
            ],
            "kind": "call",
            "target": ParseNode {
              "kind": "identifier",
              "name": "fibo",
            },
          },
        },
      },
    ],
    "kind": "literal",
    "parameters": Array [
      Object {
        "name": "x",
        "type": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "int",
        },
      },
    ],
    "returns": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "type": "fn",
  },
}
`;

exports[`Function examples Fizzbuzz and call 1`] = `
ParseNode {
  "arguments": Array [
    ParseNode {
      "kind": "literal",
      "type": "int",
      "value": 20,
    },
  ],
  "kind": "call",
  "target": ParseNode {
    "body": Array [
      ParseNode {
        "identifier": "x",
        "kind": "let",
        "value": ParseNode {
          "kind": "literal",
          "type": "int",
          "value": 0,
        },
      },
      ParseNode {
        "body": Array [
          ParseNode {
            "body": Array [
              ParseNode {
                "kind": "literal",
                "type": "str",
                "value": "fizzbuzz",
              },
            ],
            "condition": ParseNode {
              "kind": "binary",
              "left": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "kind": "identifier",
                    "name": "x",
                  },
                  "operator": "%",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": "int",
                    "value": 3,
                  },
                },
                "operator": "==",
                "right": ParseNode {
                  "kind": "literal",
                  "type": "int",
                  "value": 0,
                },
              },
              "operator": "&&",
              "right": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "kind": "identifier",
                    "name": "x",
                  },
                  "operator": "%",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": "int",
                    "value": 5,
                  },
                },
                "operator": "==",
                "right": ParseNode {
                  "kind": "literal",
                  "type": "int",
                  "value": 0,
                },
              },
            },
            "else": ParseNode {
              "body": Array [
                ParseNode {
                  "kind": "literal",
                  "type": "str",
                  "value": "buzz",
                },
              ],
              "condition": ParseNode {
                "kind": "binary",
                "left": ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "kind": "identifier",
                    "name": "x",
                  },
                  "operator": "%",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": "int",
                    "value": 5,
                  },
                },
                "operator": "==",
                "right": ParseNode {
                  "kind": "literal",
                  "type": "int",
                  "value": 0,
                },
              },
              "else": ParseNode {
                "body": Array [
                  ParseNode {
                    "kind": "literal",
                    "type": "str",
                    "value": "fizz",
                  },
                ],
                "condition": ParseNode {
                  "kind": "binary",
                  "left": ParseNode {
                    "kind": "binary",
                    "left": ParseNode {
                      "kind": "identifier",
                      "name": "x",
                    },
                    "operator": "%",
                    "right": ParseNode {
                      "kind": "literal",
                      "type": "int",
                      "value": 3,
                    },
                  },
                  "operator": "==",
                  "right": ParseNode {
                    "kind": "literal",
                    "type": "int",
                    "value": 0,
                  },
                },
                "else": Array [
                  ParseNode {
                    "kind": "identifier",
                    "name": "x",
                  },
                ],
                "kind": "if",
              },
              "kind": "if",
            },
            "kind": "if",
          },
          ParseNode {
            "kind": "assign",
            "left": ParseNode {
              "kind": "identifier",
              "name": "x",
            },
            "operator": "=",
            "right": ParseNode {
              "kind": "binary",
              "left": ParseNode {
                "kind": "identifier",
                "name": "x",
              },
              "operator": "+",
              "right": ParseNode {
                "kind": "literal",
                "type": "int",
                "value": 1,
              },
            },
          },
        ],
        "condition": ParseNode {
          "kind": "binary",
          "left": ParseNode {
            "kind": "identifier",
            "name": "x",
          },
          "operator": "<",
          "right": ParseNode {
            "kind": "identifier",
            "name": "count",
          },
        },
        "kind": "while",
      },
      ParseNode {
        "kind": "return",
        "value": ParseNode {
          "kind": "literal",
          "type": "null",
          "value": null,
        },
      },
    ],
    "kind": "literal",
    "parameters": Array [
      Object {
        "name": "count",
        "type": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "int",
        },
      },
    ],
    "returns": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "null",
    },
    "type": "fn",
  },
}
`;

exports[`Function examples Function with no parameters (with space) 1`] = `
ParseNode {
  "body": Array [
    ParseNode {
      "kind": "return",
      "value": ParseNode {
        "kind": "literal",
        "type": "null",
        "value": null,
      },
    },
  ],
  "kind": "literal",
  "parameters": Array [],
  "returns": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "null",
  },
  "type": "fn",
}
`;

exports[`Function examples Function with no parameters 1`] = `
ParseNode {
  "body": Array [
    ParseNode {
      "kind": "return",
      "value": ParseNode {
        "kind": "literal",
        "type": "null",
        "value": null,
      },
    },
  ],
  "kind": "literal",
  "parameters": Array [],
  "returns": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "null",
  },
  "type": "fn",
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Literals Arithmetic binary Adding floats 1`] = `
Object {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": "obj",
    "value": Object {
      "a": Object {
        "kind": "new",
        "target": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "int",
        },
      },
      "b": ParseNode {
        "kind": "literal",
        "type": "int",
        "value": 10,
      },
    },
  },
}
`;

exports[`Literals Arithmetic binary Adding ints 1`] = `
ParseNode {
  "kind": "literal",
  "type": "obj",
  "value": Object {
    "a": Object {
      "kind": "new",
      "target": ParseNode {
        "kind": "type",
        "origin": "builtin",
        "type": "int",
      },
    },
    "b": ParseNode {
      "kind": "literal",
      "type": "int",
      "value": 10,
    },
  },
}
`;

exports[`Literals Arithmetic binary Divide 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "float",
    "value": 3.14159,
  },
  "operator": "+",
  "right": ParseNode {
    "kind": "literal",
    "type": "float",
    "value": 2.71828,
  },
}
`;

exports[`Literals Arithmetic binary Modulo 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 9,
  },
  "operator": "-",
  "right": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 5,
  },
}
`;

exports[`Literals Arithmetic binary Operator precedence 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 6,
  },
  "operator": "/",
  "right": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 3,
  },
}
`;

exports[`Literals Arithmetic binary Operator precedence with parens 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 4,
  },
  "operator": "*",
  "right": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 2,
  },
}
`;

exports[`Literals Arithmetic binary Subtract 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 2,
  },
  "operator": "+",
  "right": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 2,
  },
}
`;

exports[`Literals Boolean binary And 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "binary",
    "left": ParseNode {
      "kind": "literal",
      "type": "int",
      "value": 2,
    },
    "operator": "+",
    "right": ParseNode {
      "kind": "literal",
      "type": "int",
      "value": 3,
    },
  },
  "operator": "*",
  "right": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 4,
  },
}
`;

exports[`Literals Boolean binary And 2`] = `
ParseNode {
  "kind": "unary",
  "operator": "!",
  "target": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": false,
  },
}
`;

exports[`Literals Boolean binary Or 1`] = `
ParseNode {
  "kind": "unary",
  "operator": "!",
  "target": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": true,
  },
}
`;

exports[`Literals Boolean binary Or 2`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": true,
  },
  "operator": "&&",
  "right": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": true,
  },
}
`;

exports[`Literals Boolean unary Negate false 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 18,
  },
  "operator": "%",
  "right": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 3,
  },
}
`;

exports[`Literals Boolean unary Negate true 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 2,
  },
  "operator": "+",
  "right": ParseNode {
    "kind": "binary",
    "left": ParseNode {
      "kind": "literal",
      "type": "int",
      "value": 3,
    },
    "operator": "*",
    "right": ParseNode {
      "kind": "literal",
      "type": "int",
      "value": 4,
    },
  },
}
`;

exports[`Literals Type literals float 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": true,
  },
  "operator": "||",
  "right": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": true,
  },
}
`;

exports[`Literals Type literals fn (no params) 1`] = `
ParseNode {
  "kind": "literal",
  "type": "type",
  "value": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "float",
  },
}
`;

exports[`Literals Type literals fn (with params) 1`] = `
ParseNode {
  "kind": "literal",
  "type": "type",
  "value": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "int",
  },
}
`;

exports[`Literals Type literals int 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": true,
  },
  "operator": "&&",
  "right": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": false,
  },
}
`;

exports[`Literals Type literals obj (freeform) 1`] = `
ParseNode {
  "kind": "literal",
  "type": "type",
  "value": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "parameters": Array [
      ParseNode {
        "kind": "type",
        "origin": "builtin",
        "type": "int",
      },
      ParseNode {
        "kind": "type",
        "origin": "builtin",
        "type": "str",
      },
    ],
    "returns": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "null",
    },
    "type": "fn",
  },
}
`;

exports[`Literals Type literals obj (structured) 1`] = `
ParseNode {
  "kind": "literal",
  "type": "type",
  "value": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "str",
  },
}
`;

exports[`Literals Type literals str 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": true,
  },
  "operator": "||",
  "right": ParseNode {
    "kind": "literal",
    "type": "bool",
    "value": false,
  },
}
`;

exports[`Literals float literal 1`] = `
ParseNode {
  "kind": "literal",
  "type": "float",
  "value": 3.14159,
}
`;

exports[`Literals float typeof 1`] = `
Object {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": "float",
    "value": 3.14159,
  },
}
`;

exports[`Literals int literal 1`] = `
ParseNode {
  "kind": "literal",
  "type": "int",
  "value": 10,
}
`;

exports[`Literals int typeof 1`] = `
Object {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 10,
  },
}
`;

exports[`Literals null literal 1`] = `
ParseNode {
  "kind": "literal",
  "type": "null",
  "value": null,
}
`;

exports[`Literals null typeof 1`] = `
Object {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": "null",
    "value": null,
  },
}
`;

exports[`Literals obj literal 1`] = `
ParseNode {
  "kind": "literal",
  "type": "str",
  "value": "hello",
}
`;

exports[`Literals obj typeof 1`] = `
Object {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "literal",
    "type": "str",
    "value": "hello",
  },
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Types 'let' From 'new' 1`] = `
ParseNode {
  "identifier": "b",
  "kind": "let",
  "value": ParseNode {
    "kind": "new",
    "target": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
  },
}
`;

exports[`Types 'let' From int literal 1`] = `
ParseNode {
  "identifier": "a",
  "kind": "let",
  "value": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 10,
  },
}
`;

exports[`Types 'let' From obj literal 1`] = `
ParseNode {
  "identifier": "myObj",
  "kind": "let",
  "value": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "structure": Object {},
      "type": "obj",
    },
    "value": Object {
      "a": ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "int",
        },
        "value": 99,
      },
      "b": ParseNode {
        "kind": "literal",
        "type": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "str",
        },
        "value": "beep",
      },
    },
  },
}
`;

exports[`Types 'new' float 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "float",
  },
}
`;

exports[`Types 'new' int 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "int",
  },
}
`;

exports[`Types 'new' null 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "null",
  },
}
`;

exports[`Types 'new' str 1`] = `
ParseNode {
  "kind": "new",
  "target": ParseNode {
    "kind": "type",
    "origin": "builtin",
    "type": "str",
  },
}
`;

exports[`Types Casting Declaration from type cast 1`] = `
ParseNode {
  "identifier": "myCastedObj",
  "kind": "let",
  "value": ParseNode {
    "from": ParseNode {
      "kind": "identifier",
      "name": "myObj",
    },
    "kind": "as",
    "to": ParseNode {
      "kind": "type",
      "name": "myObjType",
      "origin": "named",
    },
  },
}
`;

exports[`Types Casting Function call with type cast 1`] = `
ParseNode {
  "arguments": Array [
    ParseNode {
      "from": ParseNode {
        "kind": "identifier",
        "name": "myObj",
      },
      "kind": "as",
      "to": ParseNode {
        "kind": "type",
        "name": "myObjType",
        "origin": "named",
      },
    },
  ],
  "kind": "call",
  "target": ParseNode {
    "kind": "identifier",
    "name": "mySpecificFn",
  },
}
`;

exports[`Types Casting Function call without type cast 1`] = `
ParseNode {
  "arguments": Array [
    ParseNode {
      "kind": "identifier",
      "name": "myCastedObj",
    },
  ],
  "kind": "call",
  "target": ParseNode {
    "kind": "identifier",
    "name": "mySpecificFn",
  },
}
`;

exports[`Types Casting Function using user-defined type 1`] = `
ParseNode {
  "identifier": "mySpecificFn",
  "kind": "let",
  "value": ParseNode {
    "body": Array [
      ParseNode {
        "index": "a",
        "kind": "access",
        "target": ParseNode {
          "kind": "identifier",
          "name": "object",
        },
        "type": "object",
      },
      ParseNode {
        "index": "b",
        "kind": "access",
        "target": ParseNode {
          "kind": "identifier",
          "name": "object",
        },
        "type": "object",
      },
      ParseNode {
        "kind": "return",
        "value": ParseNode {
          "kind": "literal",
          "type": ParseNode {
            "kind": "type",
            "origin": "builtin",
            "type": "int",
          },
          "value": 10,
        },
      },
    ],
    "kind": "literal",
    "parameters": Array [
      Object {
        "name": "object",
        "type": ParseNode {
          "kind": "type",
          "name": "myObjType",
          "origin": "named",
        },
      },
    ],
    "returns": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "null",
    },
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "parameters": Array [
        ParseNode {
          "kind": "type",
          "name": "myObjType",
          "origin": "named",
        },
      ],
      "returns": ParseNode {
        "kind": "type",
        "origin": "builtin",
        "type": "null",
      },
      "type": "fn",
    },
  },
}
`;

exports[`Types Casting Typeof 1`] = `
ParseNode {
  "kind": "typeof",
  "target": ParseNode {
    "kind": "identifier",
    "name": "myCastedObj",
  },
}
`;

exports[`Types Casting Typeof comparison 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "typeof",
    "target": ParseNode {
      "kind": "identifier",
      "name": "myCastedObj",
    },
  },
  "operator": "==",
  "right": ParseNode {
    "kind": "typeof",
    "target": ParseNode {
      "kind": "identifier",
      "name": "myObj",
    },
  },
}
`;

exports[`Types Casting Typeof comparison with nested type cast 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "kind": "typeof",
    "target": ParseNode {
      "kind": "identifier",
      "name": "myCastedObj",
    },
  },
  "operator": "==",
  "right": ParseNode {
    "kind": "typeof",
    "target": ParseNode {
      "from": ParseNode {
        "kind": "identifier",
        "name": "myObj",
      },
      "kind": "as",
      "to": ParseNode {
        "kind": "type",
        "name": "myObjType",
        "origin": "named",
      },
    },
  },
}
`;

exports[`Types Type assignments with let fn type 1`] = `
ParseNode {
  "identifier": "myFnType",
  "kind": "let",
  "value": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "type",
    },
    "value": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "parameters": Array [
        ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "int",
        },
        ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "str",
        },
        ParseNode {
          "kind": "type",
          "name": "myIntType",
          "origin": "named",
        },
      ],
      "returns": ParseNode {
        "kind": "type",
        "origin": "builtin",
        "type": "str",
      },
      "type": "fn",
    },
  },
}
`;

exports[`Types Type assignments with let int primitive 1`] = `
ParseNode {
  "identifier": "myIntType",
  "kind": "let",
  "value": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "type",
    },
    "value": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
  },
}
`;

exports[`Types Type assignments with let obj type 1`] = `
ParseNode {
  "identifier": "myObjType",
  "kind": "let",
  "value": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "type",
    },
    "value": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "structure": Object {
        "a": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "int",
        },
        "b": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "str",
        },
      },
      "type": "obj",
    },
  },
}
`;

exports[`Types obj access Access 1`] = `
ParseNode {
  "index": "a",
  "kind": "access",
  "target": ParseNode {
    "kind": "identifier",
    "name": "myObj",
  },
  "type": "object",
}
`;

exports[`Types obj access Access from nested cast 1`] = `
ParseNode {
  "index": "a",
  "kind": "access",
  "target": ParseNode {
    "from": ParseNode {
      "kind": "identifier",
      "name": "myObj",
    },
    "kind": "as",
    "to": ParseNode {
      "kind": "type",
      "name": "myObjType",
      "origin": "named",
    },
  },
  "type": "object",
}
`;

exports[`Types obj access Access function call result 1`] = `
ParseNode {
  "index": "a",
  "kind": "access",
  "target": ParseNode {
    "arguments": Array [],
    "kind": "call",
    "target": ParseNode {
      "kind": "identifier",
      "name": "someFn",
    },
  },
  "type": "object",
}
`;

exports[`Types obj access Access use in binary 1`] = `
ParseNode {
  "kind": "binary",
  "left": ParseNode {
    "index": "a",
    "kind": "access",
    "target": ParseNode {
      "kind": "identifier",
      "name": "myObj",
    },
    "type": "object",
  },
  "operator": "+",
  "right": ParseNode {
    "kind": "literal",
    "type": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "type": "int",
    },
    "value": 10,
  },
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Lists Access 1`] = `
Object {
  "index": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 2,
  },
  "kind": "access",
  "target": ParseNode {
    "kind": "identifier",
    "name": "myList",
  },
}
`;

exports[`Lists Access from function call result 1`] = `
Object {
  "index": ParseNode {
    "kind": "literal",
    "type": "int",
    "value": 10,
  },
  "kind": "access",
  "target": Object {
    "arguments": Array [],
    "kind": "call",
    "target": ParseNode {
      "kind": "identifier",
      "name": "myListFn",
    },
  },
}
`;

exports[`Lists Creation of custom type (irrelvant) 1`] = `
ParseNode {
  "identifier": "myType",
  "kind": "let",
  "value": ParseNode {
    "kind": "literal",
    "type": "type",
    "value": ParseNode {
      "kind": "type",
      "origin": "builtin",
      "structure": Object {
        "a": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "int",
        },
        "b": ParseNode {
          "kind": "type",
          "origin": "builtin",
          "type": "str",
        },
      },
      "type": "obj",
    },
  },
}
`;

exports[`Lists Function returning list 1`] = `
ParseNode {
  "identifier": "myListFn",
  "kind": "let",
  "value": ParseNode {
    "body": Array [
      ParseNode {
        "kind": "return",
        "value": ParseNode {
          "kind": "new",
          "target": ParseNode {
            "contains": ParseNode {
              "kind": "type",
              "origin": "builtin",
              "type": "int",
            },
            "kind": "type",
            "origin": "builtin",
            "type": "list",
          },
        },
      },
    ],
    "kind": "literal",
    "parameters": Array [],
    "returns": ParseNode {
      "contains": ParseNode {
        "kind": "type",
        "origin": "builtin",
        "type": "int",
      },
      "kind": "type",
      "origin": "builtin",
      "type": "list",
    },
    "type": "fn",
  },
}
`;

exports[`Lists Initialization from object list literal 1`] = `
ParseNode {
  "identifier": "myTypeList2",
  "kind": "let",
  "value": ParseNode {
    "kind": "new",
    "target": ParseNode {
      "contains": ParseNode {
        "kind": "type",
        "origin": "builtin",
        "structure": Object {
          "a": ParseNode {
            "kind": "type",
            "origin": "builtin",
            "type": "int",
          },
          "b": ParseNode {
            "kind": "type",
            "origin": "builtin",
            "type": "str",
          },
        },
        "type": "obj",
      },
      "kind": "type",
      "origin": "builtin",
      "type": "list",
    },
  },
}
`;

exports[`Lists Initialization with 'let' 1`] = `
ParseNode {
  "identifier": "myList",
  "kind": "let",
  "value": ParseNode {
    "kind": "new",
    "target": ParseNode {
      "contains": ParseNode {
        "kind": "type",
        "origin": "builtin",
        "type": "int",
      },
      "kind": "type",
      "origin": "builtin",
      "type": "list",
    },
  },
}
`;

exports[`Lists Initialization with custom type 1`] = `
ParseNode {
  "identifier": "myTypeList",
  "kind": "let",
  "value": ParseNode {
    "kind": "new",
    "target": ParseNode {
      "contains": ParseNode {
        "kind": "type",
        "name": "myType",
        "origin": "named",
      },
      "kind": "type",
      "origin": "builtin",
      "type": "list",
    },
  },
}
`;
